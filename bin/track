#!/usr/bin/env node

var program =	    require('commander');
var path =			require('path');
var home =			require('os-homedir')();
var fs =			require('fs');
var chalk =			require('chalk');
var lPad =			require('left-pad');
var rPad =			require('right-pad');
var ms =			require('ms');



var figures = {
	running:	chalk.green('\u25b6'),
	stopped:	chalk.red('\u25a0'),
	error:		chalk.red('!'),
	bar:        chalk.green('█')
};

if (process.platform === 'win32') {
	figures.running = '»';
}


function Trackers(trackers)
{
	this.trackers = [];
	if (trackers !== undefined) {
		trackers.forEach(function(tracker) {
			this.trackers.push(new Tracker(tracker));
		}, this);
	}
};

Trackers.prototype = {

	/**
	 * Get tracker by name.
	 *
	 * @param  {string} name
	 * @return {Tracker|undefined}
	 */
	getName: function(name) {
		var tracker;
		for (var i in this.trackers) {
			tracker = this.trackers[i];
			if (tracker.name == name) {
				return tracker;
			}
		}
	},

	/**
	 * Calculate the precentage of time this tracker took to run.
	 *
	 * @param  {Tracker} tracker
	 * @return {integer}
	 */
	calculatePercentage: function(tracker) {
		return Math.round(tracker.timeTaken() / this.getTotalTime() * 100, 0);
	},

	/**
	 * Get the total amount of time taken for all trackers.
	 *
	 * @return {integer}
	 */
	getTotalTime: function() {
		var total = 0;
		this.trackers.forEach(function(tracker) {
			total += tracker.timeTaken();
		});
		return total;
	},

	/**
	 * Start tracker name.
	 *
	 * @param  {string} name
	 * @return {Tracker}
	 */
	start: function(name) {

		var tracker = this.getName(name);
		var output = [
			figures.running,
			chalk.underline(name)
		];

		if (!tracker) {
			tracker = new Tracker({ name: name });
			tracker.start();
			this.trackers.push(tracker);
			output.push(chalk.gray('started'));
		} else if (tracker.isRunning()) {
			output.push(chalk.gray('already running'));
		} else {
			tracker.start();
			output.push(chalk.gray('resumed'));
		}

		if (!program.silent) {
			if (program.porcelain) process.stdout.write(JSON.stringify(tracker) + '\n');
			else process.stdout.write(output.join(' ') + '\n');
		}

		writeFile();
	},

	/**
	 * Stop tracker name.
	 *
	 * @param  {string} name
	 * @return {void}
	 */
	stop: function(name) {

		var tracker = this.getName(name);
		var output = [];

		if (tracker) {
			if (!tracker.isRunning())
				output.push(figures.error, chalk.underline(tracker.name), chalk.gray('isn\'t started'));
			else {
				tracker.stop();
				output.push(figures.stopped, chalk.underline(tracker.name), chalk.gray('stopped'));
			}
		} else output.push(figures.error, chalk.underline(name), chalk.gray('doesn\'t exist'));

		if (!program.silent) {
			if (program.porcelain) process.stdout.write(tracker.toString() + '\n');
			else process.stdout.write(output.join(' ') + '\n');
		}

		writeFile();
	},

	/**
	 * Add time onto given tracker name.
	 *
	 * @param {string} name
	 * @param {integer} amount
	 */
	add: function(name, amount) {

		var tracker = this.getName(name);
		var output = [];

		if (tracker) {
			tracker.addTime(amount);
			output.push(chalk.gray('added'));
			output.push(chalk.cyan(ms(ms(amount))));
			output.push(chalk.gray('to'));
			output.push(chalk.underline(tracker.name));
		} else output.push(figures.error, chalk.underline(name), chalk.gray('doesn\'t exist'));

		if (!program.silent) {
			if (program.porcelain) process.stdout.write(tracker.toString() + '\n');
			else process.stdout.write(output.join(' ') + '\n');
		}

		writeFile();
	},

	/**
	 * Subtract time onto given tracker name.
	 *
	 * @param  {string} name
	 * @param  {integer} amount
	 * @return {void}
	 */
	subtract: function(name, amount) {
		
		var tracker = this.getName(name);
		var output = [];

		if (tracker) {
			tracker.subTime(amount);
			output.push(chalk.gray('subtracted'));
			output.push(chalk.cyan(ms(ms(amount))));
			output.push(chalk.gray('from'));
			output.push(chalk.underline(tracker.name));
		} else output.push(figures.error, chalk.underline(name), chalk.gray('doesn\'t exist'));

		if (!program.silent) {
			if (program.porcelain) process.stdout.write(JSON.stringify(tracker) + '\n');
			else process.stdout.write(output.join(' ') + '\n');
		}

		writeFile();
	},

	/**
	 * Render status of given tracker name.
	 *
	 * @param  {string} name
	 * @return {void}
	 */
	renderName: function(name) {
		var tracker = this.getName(name);
		var output = [];

		if (program.porcelain) {
			output.push(tracker ? tracker.toString() : '{}');
		} else if (!tracker) {
			output.push(figures.error, chalk.underline(name), chalk.gray('doesn\'t exist'));
		} else {

			output.push(lPad(chalk.underline(name), 25), '');
			var timeTaken = tracker.timeTaken();
			output.push(rPad(chalk.cyan(ms(timeTaken)), 15));

			var percentage = trackers.calculatePercentage(tracker);
			var maxBarWidth = 20;
			var barLength = Math.ceil(maxBarWidth * percentage / 100) + 1;
			var bars = new Array(barLength).join(figures.bar);
			output.push(bars, percentage + '%');

			if (tracker.isRunning()) {
				output.push('', figures.running, ms(timeTaken));
			}
		}

		process.stdout.write(output.join(' ') + '\n');
	},

	/**
	 * Render the status of all the trackers.
	 *
	 * @return {void}
	 */
	render: function () {
		if (this.trackers.length === 0) {
			process.stdout.write(chalk.gray('no trackers\n'));
			return;
		}
		this.trackers.forEach(function(tracker) {
			this.renderName(tracker.name);
		}, this);
	},

	/**
	 * Convert trackers to json for storing.
	 *
	 * @return {string}
	 */
	toString: function() {
		return JSON.stringify(this.trackers);
	}

};

function Tracker(tracker)
{
	this.name = tracker.name;
	this.startTime = tracker.startTime;
	this.endTime = tracker.endTime;
};

Tracker.prototype = {
	
	/**
	 * Start tracking time.
	 *
	 * @return {void}
	 */
	start: function() {
		if (this.startTime === undefined) {
			this.startTime = Date.now();
		} else {
			this.endTime = undefined;
		}
	},

	/**
	 * End tracking time.
	 *
	 * @return {void}
	 */
	stop: function() {
		this.endTime = Date.now();
	},

	/**
	 * Add time.
	 *
	 * @param {integer} amount
	 * @return {void}
	 */
	addTime: function(amount) {
		this.endTime += amount;
	},

	/**
	 * Subtract time.
	 *
	 * @param  {integer} amount
	 * @return {void}
	 */
	subTime: function(amount) {
		this.endTime -= amount;
	},

	/**
	 * Get time taken.
	 *
	 * @return {integer}
	 */
	timeTaken: function() {
		var endTime = this.endTime;
		if (this.endTime === undefined) {
			endTime = Date.now();
		}
		return endTime - this.startTime;
	},

	/**
	 * Determine if tracker is running.
	 *
	 * @return {boolean}
	 */
	isRunning: function() {
		return this.endTime === undefined;
	},

	/**
	 * Serialize tracker.
	 *
	 * @return {object}
	 */
	serialize: function() {
		return {
			name: this.name,
			start: this.startTime,
			end: this.endTime,
			time: this.timeTaken()
		};
	},

	/**
	 * Convert tracker to string.
	 *
	 * @return {string}
	 */
	toString: function() {
		return JSON.stringify(this.serialize());
	}
}

function writeFile() {
	try {
		fs.writeFileSync(file, trackers.toString());
	} catch (err) {
		process.stderr.write(err.message);
		process.exit(1);
	}
}

var dir = path.join(home, 'time-tracking');
try {
	if (!fs.statSync(dir).isDirectory()) {
		process.stderr.write(dir + ' is not a directory.');
		process.exit(1);
	}
} catch (err) {
	try { fs.mkdirSync(dir); }
	catch (err) {
		process.stderr.write(err.message);
		process.exit(1);
	}
}

var file = path.join(dir, 'trackers.json');
if (fs.existsSync(file)) {
	var trackersObj = [];
	try {
		var trackersObj = JSON.parse(fs.readFileSync(file));
	}
	catch (err) {
		process.stderr.write('Cannot parse ' + file + '.');
		process.exit(1);
	}
}
trackers = new Trackers(trackersObj);

program
	.usage('Usage: <command> [options]')
	.version(require('../package').version)
	.option('-s --silent', 'No output')
	.option('-p --porcelain', 'Machine-readable output.')

program
	.command('start <name>')
	.option('--name [name]', 'Name of tracker')
	.description('Start a new or resume an existing tracker.')
	.action(function(name) {
		trackers.start(name);
	});

program
	.command('stop <name>')
	.option('--name [name]', 'Name of tracker')
	.description('Stop existing tracker.')
	.action(function(name) {
		trackers.stop(name);
	});

program
	.command('add <amount> <name>')
	.option('--name [name]', 'Name of tracker')
	.description('Add amount of time to an existing tracker.')
	.alias('+')
	.action(function(amount, name) {
		trackers.add(name || process.args[2], amount);
	});

program
	.command('subtract <amount> <name>')
	.option('--name [name]', 'Name of tracker')
	.description('Subtract amount of time from an existing tracker.')
	.alias('-')
	.action(function(amount, name) {
		trackers.subtract(name || process.args[2], amount);
	});

program
	.command('status [name]')
	.option('--name [name]', 'Name of tracker')
	.description('Show the status of all or the spcified tracker.')
	.alias('s')
	.action(function(name) {
		if (program.silent) return;

		if (name) {
			trackers.renderName(name);
		} else {
			trackers.render();
		}
	});

program.parse(process.argv);

if (program.args.length === 0) {
	program.help();
}
